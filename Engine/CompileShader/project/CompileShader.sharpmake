using Sharpmake;
using System;

namespace CompileShader
{
    [Sharpmake.Generate]
    public class CompileShaderProject : Project
    {
        public CompileShaderProject()
        {
            Name = "CompileShader";

            AddTargets(new Target(
                    Platform.win32 | Platform.win64,
                    DevEnv.vs2015 | DevEnv.vs2017,
                    Optimization.Debug | Optimization.Release,
					OutputType.Lib,
					Blob.NoBlob | Blob.Blob
            ));
            RootPath = @"[project.SharpmakeCsPath]\..";
            SourceRootPath = RootPath;
			
			SourceFilesExtensions.Add(".hlsl");
			SourceFilesCompileExtensions.Add(".hlsl");
        }
		
		protected override void ExcludeOutputFiles()
        {
            base.ExcludeOutputFiles();
            Project.Configuration.CustomFileBuildStep cus = new Project.Configuration.CustomFileBuildStep();
			cus.KeyInput = @"..\Shader\DefaultShader_NoTex_PS.hlsl";
			cus.Executable = @"asdsadsa";
			cus.ExecutableArguments = "param1 param2";
			
			Project.Configuration.CustomFileBuildStep cus2 = new Project.Configuration.CustomFileBuildStep();
			cus2.KeyInput = @"..\Shader\DefaultShader_PS.hlsl";
			cus2.Executable = @"dddddd";

			foreach (Sharpmake.Project.Configuration conf in this.Configurations)
            {
				conf.CustomFileBuildSteps.Add(cus);
				conf.CustomFileBuildSteps.Add(cus2);
			}
        }
		
        [Configure()]
        public void ConfigureAll(Configuration conf, Target target)
        {
			
			conf.CustomBuildForAllSources = new Configuration.FileCustomBuild();
			conf.CustomBuildForAllSources.CommandLines.Add("..\\..\\..\\Tools\\ShaderCompiler\\build\\shadercompiler.exe /Source:\"%(FullPath)\" /Output:\"\\..\\..\\output\\$(Platform)\\%(Filename).cso\"");
			conf.CustomBuildForAllSources.Description = "Compiling shader";
			conf.CustomBuildForAllSources.Inputs.Add("%(FullPath)");
			conf.CustomBuildForAllSources.Outputs.Add(@"\..\..\output\$(Platform)\%(Filename).cso");
			
            conf.ProjectFileName = "[project.Name]_[target.DevEnv]_[target.Platform]";
            conf.ProjectPath = @"[project.SharpmakeCsPath]";
			conf.IntermediatePath = @"[project.RootPath]\..\..\output\_temp\[target.DevEnv]\[target.Platform]\[project.Name]\[target.Optimization]";
			conf.TargetPath = @"[project.RootPath]\..\..\output\_temp\[target.DevEnv]\lib";
			conf.IncludePaths.Add(@"[project.RootPath]");
			conf.IncludePaths.Add(@"[project.RootPath]\..");
			
			conf.TargetFileFullName = @"[project.Name]_[target.Platform]_[target.Optimization]";
			conf.Output = Configuration.OutputType.Lib;
			
			conf.Options.Add(Options.Vc.General.TreatWarningsAsErrors.Enable);
			conf.Options.Add(Options.Vc.Compiler.Exceptions.Enable);
			conf.Options.Add(Options.Vc.Compiler.MinimalRebuild.Disable);
			conf.Options.Add(Options.Vc.Compiler.FloatingPointModel.Precise);	
			conf.Options.Add(Options.Vc.General.WarningLevel.Level3);
			conf.Options.Add(Options.Vc.Compiler.RTTI.Enable);
        }
		
		[Configure()]
        public void ConfigureWindows(Configuration conf, Target target)
		{			
			if(target.Platform == Platform.win32)
			{
				conf.ExportDefines.Add("PLATFORM_WIN32");
				conf.Defines.Add("PLATFORM_WIN32");
			}
			else if(target.Platform == Platform.win64)
			{
				conf.ExportDefines.Add("PLATFORM_WIN64");
				conf.Defines.Add("PLATFORM_WIN64");
			}
			conf.ProjectFileName = "[project.Name]_[target.DevEnv]_win";
		}
    }
}